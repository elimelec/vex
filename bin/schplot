#!/usr/bin/perl
##
## Copyright (C) 1994 - 2005 Hewlett-Packard Company
##
## The information and source code contained herein is the exclusive
## property of Hewlett-Packard Company and may not be reproduced 
## in whole or in part without explicit written authorization from 
## the company. See "<vexroot>/LICENSE.txt" for license terms.
##

#
# $Id: schplot,v 1.4 2005/02/24 11:42:17 frb Exp $
#
# [Automatically generated by a2p]

# usage
if ($ARGV[0] eq "-h" || $ARGV[0] eq "--help") { usage(); }
# process any FOO=bar switches
eval '$'.$1.'$2;' while $ARGV[0] =~ /^([A-Za-z_0-9]+=)(.*)/ && shift;
$[ = 1; # set array base to 1 (awk ugliness)

$xvcgtrace = $TRACE;
$functname = $FUNC;

$maxclust = -1;
$box_width = 100;
$box_height = 50;
$maxlines = 50;
$xvcgout = 0;
$xoff = 100;
$col = 0;
$col_maxwidth = 0;
$clust_maxwidth = 4;
$yoff = 100;
$xpos = $xoff;
$ypos = $yoff;
$nodenum = 0;
$graphout = 0;
if ($xvcgtrace == 0) {
    $xvcgtrace = 1;
}

################################################################################

while (<>) {
    ($Fld1,$Fld2) = split(' ', $_, 9999);

    ################################################################################
    if (/^\.proc/) {
	$_ = &Getline0();
	$_ = &Getline0();

	$curr_proc = $Fld1;

	if (index($curr_proc, ':')) {
	    $curr_proc = substr($curr_proc, 1, index($curr_proc, ':') - 1);
	}
	if ($functname eq '') {
	    $functname = $curr_proc;
	}
	$curr_trace = 0;
	$p_oper = 0;
	$p_copy = 0;
	$p_inst = 0;
	$p_nop = 0;
	$p_spill = 0;
	$p_rest = 0;
    }

    ################################################################################
    if (/^\.endp /) {
	$p_oper += $t_oper;
	$p_copy += $t_copy;
	$p_inst += $t_inst;
	$trace = 0;
	$g_oper += $p_oper;
	$g_inst += $p_inst;
	$g_copy += $p_copy;
	$g_nop += $p_nop;
	$g_spill += $p_spill;
	$g_rest += $p_rest;
    }

    ################################################################################
    if (/^\.trace /) {
	if ($trace) {
	    if ($xvcgout) {
		$xvcgout = 0;
		printf (("}\n"));
	    }
	    $p_oper += $t_oper;
	    $p_copy += $t_copy;
	    $p_inst += $t_inst;
	    $p_nop += $t_nop;
	}
	$curr_trace = $Fld2;
	if ($xvcgout == 0 && $xvcgtrace == $curr_trace && $curr_proc eq $functname) {
	    printf "graph: {\n", $f;
	    printf "xspace: 50\n", $f;
	    printf "yspace: 30\n", $f;
	    printf "layoutalgorithm: minbackward\n", $f;
	    printf "finetuning: yes\n", $f;
	    printf "display_edge_labels: yes\n", $f;
	    printf "dirty_edge_labels: yes\n", $f;
	    printf "nearedges: no\n", $f;
	    printf "manhattan_edges: no\n", $f;
	    printf "smanhattan_edges: no\n", $f;
	    printf "priority_phase: yes\n", $f;
	    printf "crossingoptimization: yes\n", $f;
	    printf "splines: no\n", $f;
	    printf "port_sharing: no\n", $f;
	    printf "arrow_mode: fixed\n", $f;
	    printf "node.borderwidth: 1\n", $f;
	    printf "edge.thickness: 1\n", $f;
	    printf "edge.arrowsize: 8\n", $f;
	    printf "invisible: 2\n", $f;
	    $xvcgout = 1;
	    $graphout = 1;
	}
	$t_inst = 0;
	$t_oper = 0;
	$t_inst_oper = 0;
	$col_maxwidth = 0;
	$t_copy = 0;
	$t_nop = 0;
	$is_nop = 0;
	$trace++;
	$curr_trace = $Fld2;

	for ($i = 0; $i <= $maxclust; ++$i) {
	    $clust_usage{$i} = 0;
	}
	$maxclust = -1;
    }

    ################################################################################

    $is_oper = 0;
    $clust = -1;
    $is_copy = 0;
    # $label = 'ALU';
    $label = $Fld2;
    if ($Fld1 ne "c0") {
        $label .= "[$Fld1]";
    }
    $color = 'yellow';
    if ($Fld1 eq ';;') {
	$t_inst++;
	$t_nop += $is_nop;
	if ($is_nop) {
	    $label = 'nop';
	    $color = 'white';
	}
	$is_nop = 1;
	$t_inst_oper = 0;
    }
    elsif (substr($Fld1, 3, 1) eq '=') {
	$t_copy++;
	$is_nop = 0;
	$is_copy = 1;
	$label = "copy[$Fld1]";
	$color = 'lightmagenta';
    }
    elsif (substr($Fld1, 1, 1) eq '<') {
	$is_oper = 1;
	$clust = substr($Fld1, 2, 1);
    }
    elsif (substr($Fld1, 1, 1) eq 'c') {
	$is_oper = 1;
	$clust = substr($Fld1, 2, 1);
    }
    elsif (substr($Fld1, 1, 1) eq '(') {
	$is_oper = 1;
	$clust = -1;
    }
    if ($is_oper) {
	$t_oper++;
	$is_nop = 0;
    }
    if ($clust >= 0) {
	$clust_usage{$clust}++;
	if ($clust > $maxclust) {
	    $maxclust = $clust;
	}
    }
    if ($xvcgout && ($is_oper || $is_copy)) {
	$ypos = $yoff + ($t_inst % $maxlines) * $box_height;
	printf 
	    "node: { title: \"#%d\" loc: { x: %d y: %d } width: %d height: %d ",
	    $nodenum, $xpos + ($t_inst_oper * $box_width), $ypos, $box_width, $box_height;
	$t_inst_oper++;
	if ($col_maxwidth <= $t_inst_oper) {
	    $col_maxwidth = $t_inst_oper;
	}
	$newcol = (($t_inst / $maxlines) - ($t_inst % $maxlines) / $maxlines);
	if ($newcol > $col) {
	    $xpos += ($col_maxwidth + 1) * $box_width;
	    $col = $newcol;
	}
	$nodenum++;
    }

    ################################################################################
    if (/ ld[whb]/) {
	$ldm++;
        # $label = 'LOAD';
	$color = 'green';
    }

    if (/ st[whb]/) {
	$stm++;
        # $label = 'STORE';
	$color = 'green';
    }

    if (/ br/) {
	$ptb++;
        # $label = 'BRANCH';
	$color = 'purple';
    }

    if (/ xnop/) {
	$xnop++;
	$t_nop += $Fld2;
	$t_inst += $Fld2;
	$t_inst_oper = 0;
    }

    if (/ ldw.*restore/) {
	$p_rest++;
	$label = 'spill';
	$color = 'red';
    }

    if (/ stw.*spill/) {
	$p_spill++;
	$label = 'restore';
	$color = 'red';
    }

    ################################################################################

    if ($xvcgout && ($is_oper || $is_copy)) {
	printf "label:  \"%s\" color: %s}\n", $label, $color;
    }

    ################################################################################

    ################################################################################
}

$mem = $ldm + $stm + $ldl + $stl;
$alu = $g_oper - $mem - $ptb;
$g_mops = $g_oper + $g_copy;
if ($graphout == 0) {
    printf (("graph: {\nxspace: 50}\n"));
}

sub Getline0 {
    if ($getline_ok = (($_ = <>) ne '')) {
	($Fld1,$Fld2) = split(' ', $_, 9999);
    }
    $_;
}

sub usage {
    print "\n";
    print "Usage: schplot [TRACE=<trace_num>] [FUNC=<func_name>] vexfile.s\n";
    print "\n";
    print "Writes to stdout a VCG graph representing the compacted VEX\n";
    print "schedule correspoding to trace <trace_num> in function <func_name>\n";
    print "Can be piped to xvcg, for example by running:\n";
    print "    schplot foo.s | xvcg -\n";
    print "\n";
    exit 1;
}
